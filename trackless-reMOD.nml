//North Korean Track Set
//Defines the GRF
grf {
 grfid: "RJE\1D";
 name: string(STR_GRF_NAME);
 desc: string(STR_GRF_DESC);
 version: 1;
 min_compatible_version: 1;
 param {
  PARAM_FENCE {
   type: bool;
   name: string(STR_PARAM_FENCE);
   desc: string(STR_PARAM_FENCE_DESC);
   def_value: 0;
  }
 }
 param {
  PARAM_ISR {
   type: bool;
   name: string(STR_PARAM_ISR);
   desc: string(STR_PARAM_ISR_DESC);
   def_value: 1;
  }
 }
 param {
  PARAM_JP {
   type: bool;
   name: string(STR_PARAM_JP);
   desc: string(STR_PARAM_JP_DESC);
   def_value: 1;
  }
 }
 param {
  PARAM_DPRK {
   type: bool;
   name: string(STR_PARAM_DPRK);
   desc: string(STR_PARAM_DPRK_DESC);
   def_value: 1;
  }
 }
 param {
  PARAM_CHIPS {
   type: bool;
   name: string(STR_PARAM_CHIPS);
   desc: string(STR_PARAM_CHIPS_DESC);
   def_value: 1;
  }
 }
}

//Defines how the sprites are tracked, courtesy of the swedish rail set.
/* $Id$ */
/*
 * This file is part of the Swedish RailSet.
 * Swedish RailSet is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * Swedish RailSet is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Swedish RailSet. If not, see <http://www.gnu.org/licenses/>.
 */
// Default ground tile template (re-use as needed)
template ground_tile(x, y) { [x, y, 64, 31, -31, 0, 9] }
// track_type underlays
template tmpl_underlay_straight() {
 [ 75, 0, 64,31, -31, 0]
 [ 0, 0, 64,31, -31, 0]
}
template tmpl_underlay_slope() {
 [ 75, 40, 64,39, -31, -8]
 [150, 40, 64,23, -31, 0]
 [225, 40, 64,23, -31, 0]
 [300, 40, 64,39, -31, -8]
}
template tmpl_underlay_slope_U() {
 [ 75, 40, 64,39, -31, -8]
 [150, 40, 64,23, -31, 0]
 [225, 40, 64,23, -31, 0]
 [300, 40, 64,39, -32, -8]
}
template tmpl_underlay_diagonal() {
 [150, 0, 64,31, -31, 0]
 [225, 0, 64,31, -31, 0]
 [ 0, 40, 64,31, -31, 0]
 [300, 0, 64,31, -31, 0]
}
template tmpl_underlay_track_types() {
 tmpl_underlay_straight()
 tmpl_underlay_diagonal()
 tmpl_underlay_slope()
 // x - crossing
 [ 0,120, 64,31, -31, 0]
 // underlay for crossings w/o tracks
 [ 0, 80, 64,31, -31, 0]
 [225, 80, 64,31, -31, 0]
 [150, 80, 64,31, -31, 0]
 [ 75, 80, 64,31, -31, 0]
 [300, 80, 64,31, -31, 0]
}
template tmpl_underlay_track_types_U() {//Urban
 tmpl_underlay_straight()
 tmpl_underlay_diagonal()
 tmpl_underlay_slope_U()
 // x - crossing
 [ 0,120, 64,31, -31, 0]
 // underlay for crossings w/o tracks
 [ 0, 80, 64,31, -31, 0]
 [225, 80, 64,31, -31, 0]
 [150, 80, 64,31, -31, 0]
 [ 75, 80, 64,31, -31, 0]
 [300, 80, 64,31, -31, 0]
}
template tmpl_overlay_straight_EDS() {
 [ 0,155, 42,23, -19-2, 5-1]
 [ 50,155, 42,23, -19, 5-1]
}
template tmpl_overlay_slopes_EDS() {
 [ 0,195, 64,39, -31, -8]
 [ 75,195, 64,23, -31, 0]
 [150,195, 64,23, -31, 0]
 [225,195, 64,39, -32, -9]
}
template tmpl_overlay_diagonal_EDS() {
 [97,155, 46, 8, -19-3, 4-1]
 [150,155, 48, 8, -19-4, 20-1]
 [200,155, 12,21, 11, 6-1]
 [250,155, 12,21, -21, 6-1]
}
// track_type overlays_EDS
template tmpl_overlay_track_types_EDS() {
    tmpl_overlay_straight_EDS()
    tmpl_overlay_diagonal_EDS()
    tmpl_overlay_slopes_EDS()
}
template tmpl_overlay_straight() {
 [ 0,155, 40,23, -19, 5]
 [ 50,155, 40,23, -19, 5]
}
template tmpl_overlay_slopes() {
 [ 0,195, 64,39, -31, -8]
 [ 75,195, 64,23, -31, 0]
 [150,195, 64,23, -31, 0]
 [225,195, 64,39, -32, -9]
}
template tmpl_overlay_diagonal() {
 [100,155, 40, 7, -19, 4]
 [150,155, 40, 7, -19, 20]
 [200,155, 12,19, 11, 6]
 [250,155, 12,19, -21, 6]
}
// track_type overlays
template tmpl_overlay_track_types() {
    tmpl_overlay_straight()
    tmpl_overlay_diagonal()
    tmpl_overlay_slopes()
}
template tmpl_bridges_underlay() {
 tmpl_underlay_straight()
 tmpl_underlay_slope()
 tmpl_underlay_diagonal()
}
// bridge surface overlays
template tmpl_bridges_overlay() {
//    tmpl_overlay_straight()
//    tmpl_overlay_slopes()
//    tmpl_overlay_diagonal()
 tmpl_bridges_underlay()
}
// track_type tunnel tracks
template tmpl_tunnel_tracks() {
 [ 75, 0, 64,31, -31, 0]
 [ 0, 0, 64,31, -31, 0]
 [ 75, 0, 64,31, -31, 0]
 [ 0, 0, 64,31, -31, 0]
}
// track_type level crossings
template tmpl_level_crossing_track_types_empty() {
 [ 0,155, 40,21, -20, 5]
 [ 50,155, 40,21, -20, 5]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
 [ 0,240, 10,10, 0, 0]
}
template tmpl_rails_crossing(x,y) {
 [ x, y, 45,23, -21, 4]
 [x+49, y, 45,23, -22, 4]
}
template tmpl_level_crossing_track_types_open(y) {
    tmpl_rails_crossing(0, 0)
 [ 0, 0, 1,1, 0, 0]
 [ 0, y, 5,23, -5, -16]
 [20, y, 5,23, -6, -21]
 [ 0, 0, 1,1, 0, 0]
 [40, y, 5,23, 3, -18]
 [ 0, 0, 1,1, 0, 0]
 [ 0, 0, 1,1, 0, 0]
 [60, y, 5,23, 1, -22]
}
template tmpl_level_crossing_track_types_closed(y) {
    tmpl_rails_crossing(0, 0)
 [ 0, 0, 1,1, 0, 0]
 [ 0, y, 19,19, -5, -7]
 [20, y, 19,19, -20, -12]
 [ 0, 0, 1,1, 0, 0]
 [40, y, 19,19, 3, -7]
 [ 0, 0, 1,1, 0, 0]
 [ 0, 0, 1,1, 0, 0]
 [60, y, 19,19, -13, -11]
}
// fences
template tmpl_fences(y) {
//fence drawing on diagonals is and has always been broken, the fences on both sides really need to be moved apart 4 px horizontally and 2 px vertically (1 "TTD unit", see also:
//	- https://www.tt-forums.net/viewtopic.php?f=26&t=61584
//	- https://bugs.openttd.org/task/5309
// need to move both sides half of that to compensate, or (todo) write a patch
// commented offsets are perfect for the front fence on diagonals
//	[  0,  y, 33,22, -30,  -6]
 [ 0, y, 33,22, -32, -7]
//	[ 48,  y, 33,22,  -2,  -6]
 [ 48, y, 33,22, 0, -7]
 [ 93, y, 8,32, -3, -19] // verticals are OK as-is
 [112, y, 65, 9, -32, -10] // same for horizontals
//	[192,  y, 33,15, -29,  -7]
 [192, y, 33,15, -31, -8]
//	[240,  y, 33,15,  -1,  -7]
 [240, y, 33,15, 1, -8]
//	[288,  y, 33,30, -30, -14]
 [288, y, 33,30, -32, -15]
//	[350,  y, 33,30,  -2, -14]
 [350, y, 33,30, 0, -15]
}
// Fence. Updated template from Korean Track set by SerpensNebula https://github.com/SerpensNebula using graphics supplied by EmperorJake of the JP+ goon squad.
template tmpl_new_fences (x, y) {
    [ x, y, 32, 25, -33, -11]
    [ x+40, y, 32, 25, 3, -11]
    [ x+80, y, 8, 39, -3, -24]
    [ x+100, y, 64, 12, -31, -12]
    [ x+170, y, 32, 17, -33, -10]
    [ x+210, y, 32, 17, 3, -10]
    [ x+250, y, 32, 35, -33, -20]
    [ x+290, y, 32, 35, 3, -20]
    [ x, y, 32, 25, -29, -9]
    [ x+40, y, 32, 25, -1, -9]
    [ x+330, y, 8, 39, -3, -24]
    [ x+100, y, 64, 12, -31, -12]
    [ x+170, y, 32, 17, -29, -8]
    [ x+210, y, 32, 17, -1, -8]
    [ x+250, y, 32, 35, -29, -18]
    [ x+290, y, 32, 35, -1, -18]
}
// gui
template tmpl_gui() {
 [ 0, 0, 20, 20, 0, 0]
 [ 25, 0, 20, 20, 0, 0]
 [ 50, 0, 20, 20, 0, 0]
 [ 75, 0, 20, 20, 0, 0]
 [100, 0, 20, 20, 0, 0]
 [125, 0, 20, 20, 0, 0]
 [150, 0, 20, 20, 0, 0]
 [175, 0, 20, 20, 0, 0]
 [200, 0, 32, 32, 0, 0]
 [250, 0, 32, 32, 0, 0]
 [300, 0, 32, 32, 0, 0]
 [350, 0, 32, 32, 0, 0]
 [400, 0, 32, 32, 0, 0]
 [450, 0, 32, 32, 0, 0]
 [500, 0, 32, 32, 0, 0]
 [550, 0, 32, 32, 0, 0]
}
template tmpl_tunnel_overlaytracks(y) {
 [ 0, y, 64, 39, -7-24, -8]
 [65, y, 64, 39, -9-7-13-2, -3-14+1]
 [130, y, 64, 39, -26-7+2, -3-14+1]
 [195, y, 64, 39, -19-12, -8]
}
 template tmpl_tunnel_overlays(y) {
 [ 0, y, 64, 39, -7-24, -38]
 [65, y, 64, 39, -9-7-13-2, -33-14+1]
 [130, y, 64, 39, -26-7+2, -33-14+1]
 [195, y, 64, 39, -19-12, -38]
}
template tmpl_no_fences() {
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
 [ 0, 0, 1, 1, 0, 0]
}
template tmpl_depot(x) {
 [65, 96+2*x, 64,47+x, -9-22, -31+11-x]
 [65, 0, 64,47+x, -9, -31-x]
 [ 0, 96+2*x, 64,47+x, -53+22, -31+11-x]
 [ 0, 0, 64,47+x, -53, -31-x]
 [ 0, 48+x, 64,47+x, -53, -31-x]
 [65, 48+x, 64,47+x, -9, -31-x]
}
// Catenary stuff from Auztracks
/**********************************************
//Catenarypylons
 **********************************************/
//Catenarypylons
template template_catenarydoublepylons() {
    //[left_x, upper_y, width, height, offset_x, offset_y]
 [ 4, 28, 14, 32, -11, -30]
 [ 20, 17, 40, 43, 1, -41]
 [ 62, 28, 14, 32, -1, -30]
 [ 78, 17, 40, 43, -39, -41]
 [ 120, 28, 14, 32, -6, -31]
 [ 136, 16, 14, 44, -6, -42]
 [ 152, 28, 28, 32, 0, -31]
 [ 181, 28, 27, 32, -26, -31]
}
/**********************************************
//Catenarywires
 **********************************************/
template template_catenarywires() {
    //[left_x, upper_y, width, height, offset_x, offset_y]
 [ 10, 100, 64, 42, -45, -20]
 [ 100, 100, 64, 42, -17, -20]
 [ 200, 100, 32, 11, 0, -12] //-1
 [ 300, 100, 1, 21, 0, -8] //0
 [ 10, 200, 64, 50, -45, -21]
 [ 100, 200, 64, 34, -17, -10]
 [ 200, 200, 64, 34, -45, -10]
 [ 300, 200, 64, 50, -17, -21]
 [ 10, 300, 64, 42, -45, -20]
 [ 100, 300, 64, 42, -17, -20]
 [ 200, 300, 32, 11, 0, -12]
 [ 300, 300, 1, 21, 0, -8] //0
 [ 10, 400, 64, 50, -45, -21]
 [ 100, 400, 64, 34, -17, -10]
 [ 200, 400, 64, 34, -45, -10]
 [ 300, 400, 64, 50, -17, -21]
 [ 10, 500, 64, 42, -45, -20]
 [ 100, 500, 64, 42, -17, -20]
 [ 200, 500, 32, 11, 0, -12]
 [ 300, 500, 1, 21, 0, -8] //0
 [ 10, 600, 64, 50, -45, -21]
 [ 100, 600, 64, 34, -17, -10]
 [ 200, 600, 64, 34, -45, -10]
 [ 300, 600, 64, 50, -17, -21]
 [ 10, 700, 64, 42, -45, -20]
 [ 100, 700, 64, 42, -17, -20]
 [ 200, 700, 64, 42, -45, -20]
 [ 300, 700, 64, 42, -17, -20]
}
// Catenary stuff from Auztracks
/**********************************************
//Catenarypylons
 **********************************************/
template template_nopylons() {
    //[left_x, upper_y, width, height, offset_x, offset_y]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
}
template template_metroroof() {
    //[left_x, upper_y, width, height, offset_x, offset_y]
 //Single tile
 [0, 0, 64, 31+8, -32-16+3, -20+15]
 [65, 48, 64, 31+8, -32+16-1, -20+15]
 [130, 32+8, 64, 31, -32+16-1, -20+15]
 [0, 32+8, 64, 31, -32-16+1, -20+15-1]
 //Single tile sloped
 [65, 0, 64, 39+8, -32-13, -20+14]
 [130, 0, 64, 23+8, -32+15, -20+24]
 [195, 0, 64, 23+8, -32-13, -20+24]
 [260, 0, 64, 39+8, -32+15, -20+14]
 //Multitile
 [0, 0, 64, 31+8, -32-16+3, -20+15]
 [65, 48, 64, 31+8, -32+16-1, -20+15]
 [130, 32+8, 64, 31, -32+16-1, -20+15]
 [0, 32+8, 64, 31, -32-16+1, -20+15-1]
 //Multitile
 [65, 0, 64, 39+8, -32-13, -20+14]
 [130, 0, 64, 23+8, -32+15, -20+24]
 [195, 0, 64, 23+8, -32-13, -20+24]
 [260, 0, 64, 39+8, -32+15, -20+14]
 //Multitile
 [0, 0, 64, 31+8, -32-16+3, -20+15]
 [65, 48, 64, 31+8, -32+16-1, -20+15]
 [130, 32+8, 64, 31, -32+16-1, -20+15]
 [0, 32+8, 64, 31, -32-16+1, -20+15-1]
 //Multitile
 [65, 0, 64, 39+8, -32-13, -20+14]
 [130, 0, 64, 23+8, -32+15, -20+24]
 [195, 0, 64, 23+8, -32-13, -20+24]
 [260, 0, 64, 39+8, -32+15, -20+14]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
 [1, 1, 1, 1, 1, 1]
}

spriteset (mod_fences, "grf/NewFences.png") {
 tmpl_new_fences(0,0)
}
spriteset (reg_fences, "grf/NewFences.png") {
 tmpl_new_fences(0,50)
}
spriteset (old_fences, "grf/NewFences.png") {
 tmpl_new_fences(0,100)
}
spriteset (NO_fences, "grf/ISR1.png") {
 tmpl_no_fences()
}
//Tracktypes
//Standard Gauge Branch
spriteset (ISR1_underlay, "grf/ISR1.png") {
 tmpl_underlay_track_types()
}
spriteset (ISR1_overlay, "grf/ISR1.png") {
 tmpl_overlay_track_types()
}
spriteset (ISR1_bridge, "grf/ISR1.png") {
 tmpl_bridges_overlay()
}
spriteset (ISR1_gui, "grf/ISR1_GUI.png") {
 tmpl_gui()
}
switch(FEAT_RAILTYPES, SELF, sw_ISR1_fence, PARAM_FENCE){
 0: NO_fences;
 1: old_fences;
}
if (PARAM_ISR == 1) {
item(FEAT_RAILTYPES, ISR1_ID, 0) {
     property {
         label: "ISR1";//First of its kind gotta replace
         name: string(STR_ISR1);
         menu_text: string(STR_ISR1);
         build_window_caption: string(STR_ISR1);
         autoreplace_text: string(STR_ISR1);
         new_engine_text: string(STR_ISR1);
   toolbar_caption: string(STR_ISR1);
         compatible_railtype_list: ["ISR1","RAIL"];
         powered_railtype_list: ["ISR1","RAIL"];
   alternative_railtype_list: ["ISR1","RAIL"];
         speed_limit: 1 km/h;
   introduction_date: date(1800,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: 0;
   maintenance_cost: 0;
   sort_order: 0xFD;
     }
     graphics {
         track_overlay: ISR1_overlay; // defines the sprites drawn as overlay for junctions and highlight
         underlay: ISR1_underlay; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: ISR1_bridge; // defines the overlay drawn over bridges
   gui: ISR1_gui; // defines the gui sprites
         fences: sw_ISR1_fence; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (DPRK_underlay, "grf/DPRK.png") {
 tmpl_underlay_track_types()
}
spriteset (DPRK_overlay, "grf/DPRK.png") {
 tmpl_overlay_track_types()
}
spriteset (DPRK_bridge, "grf/DPRK.png") {
 tmpl_bridges_overlay()
}
spriteset (SNOW_underlay, "grf/SNOW.png") {
 tmpl_underlay_track_types()
}
spriteset (SNOW_overlay, "grf/SNOW.png") {
 tmpl_overlay_track_types()
}
spriteset (SNOW_bridge, "grf/SNOW.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, DPRK_overlay_SNOW,terrain_type) {
 TILETYPE_SNOW: SNOW_overlay;
 DPRK_overlay;
}
switch(FEAT_RAILTYPES, SELF, DPRK_underlay_SNOW,terrain_type) {
 TILETYPE_SNOW: SNOW_underlay;
 DPRK_underlay;
}
switch(FEAT_RAILTYPES, SELF, DPRK_bridge_SNOW,terrain_type) {
 TILETYPE_SNOW: SNOW_bridge;
 DPRK_bridge;
}
spriteset (DPRK_gui, "grf/DPRK_GUI.png") {
 tmpl_gui()
}
switch(FEAT_RAILTYPES, SELF, sw_DPRK_fence, PARAM_FENCE){
 0: NO_fences;
 1: reg_fences;
}
if (PARAM_DPRK == 1) {
item(FEAT_RAILTYPES, DPRK_ID, 1) {
     property {
         label: "DPRK";//First of its kind gotta replace
         name: string(STR_DPRK);
         menu_text: string(STR_DPRK);
         build_window_caption: string(STR_DPRK);
         autoreplace_text: string(STR_DPRK);
         new_engine_text: string(STR_DPRK);
   toolbar_caption: string(STR_DPRK);
         compatible_railtype_list: ["DPRK","RAIL"];
         powered_railtype_list: ["DPRK","RAIL"];
   alternative_railtype_list: ["DPRK","RAIL"];
         speed_limit: 1 km/h;
   introduction_date: date(1800,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: 0;
   maintenance_cost: 0;
   sort_order: 0xFF;
     }
     graphics {
         track_overlay: DPRK_overlay_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: DPRK_underlay_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: DPRK_bridge_SNOW; // defines the overlay drawn over bridges
   gui: DPRK_gui; // defines the gui sprites
         fences: sw_DPRK_fence; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (JP_underlay, "grf/JP.png") {
 tmpl_underlay_track_types()
}
spriteset (JP_overlay, "grf/JP.png") {
 tmpl_overlay_track_types()
}
spriteset (JP_bridge, "grf/JP.png") {
 tmpl_bridges_overlay()
}
switch(FEAT_RAILTYPES, SELF, JP_overlay_SNOW,terrain_type) {
 TILETYPE_SNOW: SNOW_overlay;
 JP_overlay;
}
switch(FEAT_RAILTYPES, SELF, JP_underlay_SNOW,terrain_type) {
 TILETYPE_SNOW: SNOW_underlay;
 JP_underlay;
}
switch(FEAT_RAILTYPES, SELF, JP_bridge_SNOW,terrain_type) {
 TILETYPE_SNOW: SNOW_bridge;
 JP_bridge;
}
spriteset (JP_gui, "grf/JP_GUI.png") {
 tmpl_gui()
}
if (PARAM_JP == 1) {
item(FEAT_RAILTYPES, JP_ID, 2) {
     property {
         label: "JPU1";//First of its kind gotta replace
         name: string(STR_JP);
         menu_text: string(STR_JP);
         build_window_caption: string(STR_JP);
         autoreplace_text: string(STR_JP);
         new_engine_text: string(STR_JP);
   toolbar_caption: string(STR_JP);
         compatible_railtype_list: ["JPU1","RAIL"];
         powered_railtype_list: ["JPU1","RAIL"];
   alternative_railtype_list: ["JPU1","RAIL"];
         speed_limit: 1 km/h;
   introduction_date: date(1800,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: 0;
   maintenance_cost: 0;
   sort_order: 0xFE;
     }
     graphics {
         track_overlay: JP_overlay_SNOW; // defines the sprites drawn as overlay for junctions and highlight
         underlay: JP_underlay_SNOW; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: JP_bridge_SNOW; // defines the overlay drawn over bridges
   gui: JP_gui; // defines the gui sprites
         fences: sw_DPRK_fence; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (ISR2_underlay, "grf/CHIPS3.png") {
 tmpl_underlay_track_types()
}
spriteset (ISR2_overlay, "grf/CHIPS3.png") {
 tmpl_overlay_track_types()
}
spriteset (ISR2_bridge, "grf/CHIPS3.png") {
 tmpl_bridges_overlay()
}
spriteset (ISR2_gui, "grf/CHIPS3_GUI.png") {
 tmpl_gui()
}
if (PARAM_CHIPS == 1) {
item(FEAT_RAILTYPES, ISR2_ID, 3) {
     property {
         label: "ISR2";//First of its kind gotta replace
         name: string(STR_ISR2);
         menu_text: string(STR_ISR2);
         build_window_caption: string(STR_ISR2);
         autoreplace_text: string(STR_ISR2);
         new_engine_text: string(STR_ISR2);
   toolbar_caption: string(STR_ISR2);
         compatible_railtype_list: ["ISR2","RAIL"];
         powered_railtype_list: ["ISR2","RAIL"];
   alternative_railtype_list: ["ISR2","RAIL"];
         speed_limit: 1 km/h;
   introduction_date: date(1800,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: 0;
   maintenance_cost: 0;
   sort_order: 0xFB;
     }
     graphics {
         track_overlay: ISR2_overlay; // defines the sprites drawn as overlay for junctions and highlight
         underlay: ISR2_underlay; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: ISR2_bridge; // defines the overlay drawn over bridges
   gui: ISR2_gui; // defines the gui sprites
         fences: sw_ISR1_fence; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (ISR3_underlay, "grf/CHIPS1.png") {
 tmpl_underlay_track_types()
}
spriteset (ISR3_overlay, "grf/CHIPS1.png") {
 tmpl_overlay_track_types()
}
spriteset (ISR3_bridge, "grf/CHIPS1.png") {
 tmpl_bridges_overlay()
}
spriteset (ISR3_gui, "grf/CHIPS1_GUI.png") {
 tmpl_gui()
}
if (PARAM_CHIPS == 1) {
item(FEAT_RAILTYPES, ISR3_ID, 4) {
     property {
         label: "ISR3";//First of its kind gotta replace
         name: string(STR_ISR3);
         menu_text: string(STR_ISR3);
         build_window_caption: string(STR_ISR3);
         autoreplace_text: string(STR_ISR3);
         new_engine_text: string(STR_ISR3);
   toolbar_caption: string(STR_ISR3);
         compatible_railtype_list: ["ISR3","RAIL"];
         powered_railtype_list: ["ISR3","RAIL"];
   alternative_railtype_list: ["ISR3","RAIL"];
         speed_limit: 1 km/h;
   introduction_date: date(1800,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: 0;
   maintenance_cost: 0;
   sort_order: 0xFC;
     }
     graphics {
         track_overlay: ISR3_overlay; // defines the sprites drawn as overlay for junctions and highlight
         underlay: ISR3_underlay; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: ISR3_bridge; // defines the overlay drawn over bridges
   gui: ISR3_gui; // defines the gui sprites
         fences: sw_DPRK_fence; // Custom Fences since v2
     }
 }
 }
//Standard Gauge Branch
spriteset (ISR4_underlay, "grf/CHIPS2.png") {
 tmpl_underlay_track_types()
}
spriteset (ISR4_overlay, "grf/CHIPS2.png") {
 tmpl_overlay_track_types()
}
spriteset (ISR4_bridge, "grf/CHIPS2.png") {
 tmpl_bridges_overlay()
}
spriteset (ISR4_gui, "grf/CHIPS2_GUI.png") {
 tmpl_gui()
}
if (PARAM_CHIPS == 1) {
item(FEAT_RAILTYPES, ISR4_ID, 5) {
     property {
         label: "ISR4";//First of its kind gotta replace
         name: string(STR_ISR4);
         menu_text: string(STR_ISR4);
         build_window_caption: string(STR_ISR4);
         autoreplace_text: string(STR_ISR4);
         new_engine_text: string(STR_ISR4);
   toolbar_caption: string(STR_ISR4);
         compatible_railtype_list: ["ISR4","RAIL"];
         powered_railtype_list: ["ISR4","RAIL"];
   alternative_railtype_list: ["ISR4","RAIL"];
         speed_limit: 1 km/h;
   introduction_date: date(1800,1,1);
   map_colour: 0x0C;
         station_graphics: RAILTYPE_STATION_NORMAL;
         acceleration_model: ACC_MODEL_RAIL;
         construction_cost: 0;
   maintenance_cost: 0;
   sort_order: 0xFA;
     }
     graphics {
         track_overlay: ISR4_overlay; // defines the sprites drawn as overlay for junctions and highlight
         underlay: ISR4_underlay; // defines the usual tracks and the underlay for junctions
         bridge_surfaces: ISR4_bridge; // defines the overlay drawn over bridges
   gui: ISR4_gui; // defines the gui sprites
         fences: sw_ISR1_fence; // Custom Fences since v2
     }
 }
 }

//cd /mnt/c/Temp/MTS2
